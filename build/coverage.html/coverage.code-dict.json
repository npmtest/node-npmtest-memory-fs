{"/home/travis/build/npmtest/node-npmtest-memory-fs/test.js":"/* istanbul instrument in package npmtest_memory_fs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-memory-fs/lib.npmtest_memory_fs.js":"/* istanbul instrument in package npmtest_memory_fs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_memory_fs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_memory_fs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-memory-fs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-memory-fs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_memory_fs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_memory_fs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_memory_fs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_memory_fs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_memory_fs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_memory_fs.__dirname + '/lib.npmtest_memory_fs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-memory-fs/node_modules/memory-fs/lib/MemoryFileSystem.js":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\nvar normalize = require(\"./normalize\");\r\nvar errors = require(\"errno\");\r\nvar stream = require(\"readable-stream\");\r\n\r\nvar ReadableStream = stream.Readable;\r\nvar WritableStream = stream.Writable;\r\n\r\nfunction MemoryFileSystemError(err, path) {\r\n\tError.call(this)\r\n\tif (Error.captureStackTrace)\r\n\t\tError.captureStackTrace(this, arguments.callee)\r\n\tthis.code = err.code;\r\n\tthis.errno = err.errno;\r\n\tthis.message = err.description;\r\n\tthis.path = path;\r\n}\r\nMemoryFileSystemError.prototype = new Error();\r\n\r\nfunction MemoryFileSystem(data) {\r\n\tthis.data = data || {};\r\n}\r\nmodule.exports = MemoryFileSystem;\r\n\r\nfunction isDir(item) {\r\n\tif(typeof item !== \"object\") return false;\r\n\treturn item[\"\"] === true;\r\n}\r\n\r\nfunction isFile(item) {\r\n\tif(typeof item !== \"object\") return false;\r\n\treturn !item[\"\"];\r\n}\r\n\r\nfunction pathToArray(path) {\r\n\tpath = normalize(path);\r\n\tvar nix = /^\\//.test(path);\r\n\tif(!nix) {\r\n\t\tif(!/^[A-Za-z]:/.test(path)) {\r\n\t\t\tthrow new MemoryFileSystemError(errors.code.EINVAL, path);\r\n\t\t}\r\n\t\tpath = path.replace(/[\\\\\\/]+/g, \"\\\\\"); // multi slashs\r\n\t\tpath = path.split(/[\\\\\\/]/);\r\n\t\tpath[0] = path[0].toUpperCase();\r\n\t} else {\r\n\t\tpath = path.replace(/\\/+/g, \"/\"); // multi slashs\r\n\t\tpath = path.substr(1).split(\"/\");\r\n\t}\r\n\tif(!path[path.length-1]) path.pop();\r\n\treturn path;\r\n}\r\n\r\nfunction trueFn() { return true; }\r\nfunction falseFn() { return false; }\r\n\r\nMemoryFileSystem.prototype.meta = function(_path) {\r\n\tvar path = pathToArray(_path);\r\n\tvar current = this.data;\r\n\tfor(var i = 0; i < path.length - 1; i++) {\r\n\t\tif(!isDir(current[path[i]]))\r\n\t\t\treturn;\r\n\t\tcurrent = current[path[i]];\r\n\t}\r\n\treturn current[path[i]];\r\n}\r\n\r\nMemoryFileSystem.prototype.existsSync = function(_path) {\r\n\treturn !!this.meta(_path);\r\n}\r\n\r\nMemoryFileSystem.prototype.statSync = function(_path) {\r\n\tvar current = this.meta(_path);\r\n\tif(_path === \"/\" || isDir(current)) {\r\n\t\treturn {\r\n\t\t\tisFile: falseFn,\r\n\t\t\tisDirectory: trueFn,\r\n\t\t\tisBlockDevice: falseFn,\r\n\t\t\tisCharacterDevice: falseFn,\r\n\t\t\tisSymbolicLink: falseFn,\r\n\t\t\tisFIFO: falseFn,\r\n\t\t\tisSocket: falseFn\r\n\t\t};\r\n\t} else if(isFile(current)) {\r\n\t\treturn {\r\n\t\t\tisFile: trueFn,\r\n\t\t\tisDirectory: falseFn,\r\n\t\t\tisBlockDevice: falseFn,\r\n\t\t\tisCharacterDevice: falseFn,\r\n\t\t\tisSymbolicLink: falseFn,\r\n\t\t\tisFIFO: falseFn,\r\n\t\t\tisSocket: falseFn\r\n\t\t};\r\n\t} else {\r\n\t\tthrow new MemoryFileSystemError(errors.code.ENOENT, _path);\r\n\t}\r\n};\r\n\r\nMemoryFileSystem.prototype.readFileSync = function(_path, encoding) {\r\n\tvar path = pathToArray(_path);\r\n\tvar current = this.data;\r\n\tfor(var i = 0; i < path.length - 1; i++) {\r\n\t\tif(!isDir(current[path[i]]))\r\n\t\t\tthrow new MemoryFileSystemError(errors.code.ENOENT, _path);\r\n\t\tcurrent = current[path[i]];\r\n\t}\r\n\tif(!isFile(current[path[i]])) {\r\n\t\tif(isDir(current[path[i]]))\r\n\t\t\tthrow new MemoryFileSystemError(errors.code.EISDIR, _path);\r\n\t\telse\r\n\t\t\tthrow new MemoryFileSystemError(errors.code.ENOENT, _path);\r\n\t}\r\n\tcurrent = current[path[i]];\r\n\treturn encoding ? current.toString(encoding) : current;\r\n};\r\n\r\nMemoryFileSystem.prototype.readdirSync = function(_path) {\r\n\tif(_path === \"/\") return Object.keys(this.data).filter(Boolean);\r\n\tvar path = pathToArray(_path);\r\n\tvar current = this.data;\r\n\tfor(var i = 0; i < path.length - 1; i++) {\r\n\t\tif(!isDir(current[path[i]]))\r\n\t\t\tthrow new MemoryFileSystemError(errors.code.ENOENT, _path);\r\n\t\tcurrent = current[path[i]];\r\n\t}\r\n\tif(!isDir(current[path[i]])) {\r\n\t\tif(isFile(current[path[i]]))\r\n\t\t\tthrow new MemoryFileSystemError(errors.code.ENOTDIR, _path);\r\n\t\telse\r\n\t\t\tthrow new MemoryFileSystemError(errors.code.ENOENT, _path);\r\n\t}\r\n\treturn Object.keys(current[path[i]]).filter(Boolean);\r\n};\r\n\r\nMemoryFileSystem.prototype.mkdirpSync = function(_path) {\r\n\tvar path = pathToArray(_path);\r\n\tif(path.length === 0) return;\r\n\tvar current = this.data;\r\n\tfor(var i = 0; i < path.length; i++) {\r\n\t\tif(isFile(current[path[i]]))\r\n\t\t\tthrow new MemoryFileSystemError(errors.code.ENOTDIR, _path);\r\n\t\telse if(!isDir(current[path[i]]))\r\n\t\t\tcurrent[path[i]] = {\"\":true};\r\n\t\tcurrent = current[path[i]];\r\n\t}\r\n\treturn;\r\n};\r\n\r\nMemoryFileSystem.prototype.mkdirSync = function(_path) {\r\n\tvar path = pathToArray(_path);\r\n\tif(path.length === 0) return;\r\n\tvar current = this.data;\r\n\tfor(var i = 0; i < path.length - 1; i++) {\r\n\t\tif(!isDir(current[path[i]]))\r\n\t\t\tthrow new MemoryFileSystemError(errors.code.ENOENT, _path);\r\n\t\tcurrent = current[path[i]];\r\n\t}\r\n\tif(isDir(current[path[i]]))\r\n\t\tthrow new MemoryFileSystemError(errors.code.EEXIST, _path);\r\n\telse if(isFile(current[path[i]]))\r\n\t\tthrow new MemoryFileSystemError(errors.code.ENOTDIR, _path);\r\n\tcurrent[path[i]] = {\"\":true};\r\n\treturn;\r\n};\r\n\r\nMemoryFileSystem.prototype._remove = function(_path, name, testFn) {\r\n\tvar path = pathToArray(_path);\r\n\tif(path.length === 0) {\r\n\t\tthrow new MemoryFileSystemError(errors.code.EPERM, _path);\r\n\t}\r\n\tvar current = this.data;\r\n\tfor(var i = 0; i < path.length - 1; i++) {\r\n\t\tif(!isDir(current[path[i]]))\r\n\t\t\tthrow new MemoryFileSystemError(errors.code.ENOENT, _path);\r\n\t\tcurrent = current[path[i]];\r\n\t}\r\n\tif(!testFn(current[path[i]]))\r\n\t\tthrow new MemoryFileSystemError(errors.code.ENOENT, _path);\r\n\tdelete current[path[i]];\r\n\treturn;\r\n};\r\n\r\nMemoryFileSystem.prototype.rmdirSync = function(_path) {\r\n\treturn this._remove(_path, \"Directory\", isDir);\r\n};\r\n\r\nMemoryFileSystem.prototype.unlinkSync = function(_path) {\r\n\treturn this._remove(_path, \"File\", isFile);\r\n};\r\n\r\nMemoryFileSystem.prototype.readlinkSync = function(_path) {\r\n\tthrow new MemoryFileSystemError(errors.code.ENOSYS, _path);\r\n};\r\n\r\nMemoryFileSystem.prototype.writeFileSync = function(_path, content, encoding) {\r\n\tif(!content && !encoding) throw new Error(\"No content\");\r\n\tvar path = pathToArray(_path);\r\n\tif(path.length === 0) {\r\n\t\tthrow new MemoryFileSystemError(errors.code.EISDIR, _path);\r\n\t}\r\n\tvar current = this.data;\r\n\tfor(var i = 0; i < path.length - 1; i++) {\r\n\t\tif(!isDir(current[path[i]]))\r\n\t\t\tthrow new MemoryFileSystemError(errors.code.ENOENT, _path);\r\n\t\tcurrent = current[path[i]];\r\n\t}\r\n\tif(isDir(current[path[i]]))\r\n\t\tthrow new MemoryFileSystemError(errors.code.EISDIR, _path);\r\n\tcurrent[path[i]] = encoding || typeof content === \"string\" ? new Buffer(content, encoding) : content;\r\n\treturn;\r\n};\r\n\r\nMemoryFileSystem.prototype.join = require(\"./join\");\r\nMemoryFileSystem.prototype.pathToArray = pathToArray;\r\nMemoryFileSystem.prototype.normalize = normalize;\r\n\r\n// stream functions\r\n\r\nMemoryFileSystem.prototype.createReadStream = function(path, options) {\r\n\tvar stream = new ReadableStream();\r\n\tvar done = false;\r\n\tvar data;\r\n\ttry {\r\n\t\tdata = this.readFileSync(path);\r\n\t} catch (e) {\r\n\t\tstream._read = function() {\r\n\t\t\tif (done) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tdone = true;\r\n\t\t\tthis.emit('error', e);\r\n\t\t\tthis.push(null);\r\n\t\t};\r\n\t\treturn stream;\r\n\t}\r\n\toptions = options || { };\r\n\toptions.start = options.start || 0;\r\n\toptions.end = options.end || data.length;\r\n\tstream._read = function() {\r\n\t\tif (done) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tdone = true;\r\n\t\tthis.push(data.slice(options.start, options.end));\r\n\t\tthis.push(null);\r\n\t};\r\n\treturn stream;\r\n};\r\n\r\nMemoryFileSystem.prototype.createWriteStream = function(path, options) {\r\n\tvar stream = new WritableStream(), self = this;\r\n\ttry {\r\n\t\t// Zero the file and make sure it is writable\r\n\t\tthis.writeFileSync(path, new Buffer(0));\r\n\t} catch(e) {\r\n\t\t// This or setImmediate?\r\n\t\tstream.once('prefinish', function() {\r\n\t\t\tstream.emit('error', e);\r\n\t\t});\r\n\t\treturn stream;\r\n\t}\r\n\tvar bl = [ ], len = 0;\r\n\tstream._write = function(chunk, encoding, callback) {\r\n\t\tbl.push(chunk);\r\n\t\tlen += chunk.length;\r\n\t\tself.writeFile(path, Buffer.concat(bl, len), callback);\r\n\t}\r\n\treturn stream;\r\n};\r\n\r\n// async functions\r\n\r\n[\"stat\", \"readdir\", \"mkdirp\", \"rmdir\", \"unlink\", \"readlink\"].forEach(function(fn) {\r\n\tMemoryFileSystem.prototype[fn] = function(path, callback) {\r\n\t\ttry {\r\n\t\t\tvar result = this[fn + \"Sync\"](path);\r\n\t\t} catch(e) {\r\n\t\t\tsetImmediate(function() {\r\n\t\t\t\tcallback(e);\r\n\t\t\t});\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetImmediate(function() {\r\n\t\t\tcallback(null, result);\r\n\t\t});\r\n\t};\r\n});\r\n\r\n[\"mkdir\", \"readFile\"].forEach(function(fn) {\r\n\tMemoryFileSystem.prototype[fn] = function(path, optArg, callback) {\r\n\t\tif(!callback) {\r\n\t\t\tcallback = optArg;\r\n\t\t\toptArg = undefined;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tvar result = this[fn + \"Sync\"](path, optArg);\r\n\t\t} catch(e) {\r\n\t\t\tsetImmediate(function() {\r\n\t\t\t\tcallback(e);\r\n\t\t\t});\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetImmediate(function() {\r\n\t\t\tcallback(null, result);\r\n\t\t});\r\n\t};\r\n});\r\n\r\nMemoryFileSystem.prototype.exists = function(path, callback) {\r\n\treturn callback(this.existsSync(path));\r\n}\r\n\r\nMemoryFileSystem.prototype.writeFile = function (path, content, encoding, callback) {\r\n\tif(!callback) {\r\n\t\tcallback = encoding;\r\n\t\tencoding = undefined;\r\n\t}\r\n\ttry {\r\n\t\tthis.writeFileSync(path, content, encoding);\r\n\t} catch(e) {\r\n\t\treturn callback(e);\r\n\t}\r\n\treturn callback();\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-memory-fs/node_modules/memory-fs/lib/normalize.js":"module.exports = function normalize(path) {\r\n\tvar parts = path.split(/(\\\\+|\\/+)/);\r\n\tif(parts.length === 1)\r\n\t\treturn path;\r\n\tvar result = [];\r\n\tvar absolutePathStart = 0;\r\n\tfor(var i = 0, sep = false; i < parts.length; i++, sep = !sep) {\r\n\t\tvar part = parts[i];\r\n\t\tif(i === 0 && /^([A-Z]:)?$/i.test(part)) {\r\n\t\t\tresult.push(part);\r\n\t\t\tabsolutePathStart = 2;\r\n\t\t} else if(sep) {\r\n\t\t\tresult.push(part[0]);\r\n\t\t} else if(part === \"..\") {\r\n\t\t\tswitch(result.length) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\t// i. e. \"..\" => \"..\"\r\n\t\t\t\t\t// i. e. \"../a/b/c\" => \"../a/b/c\"\r\n\t\t\t\t\tresult.push(part);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\t// i. e. \"a/..\" => \"\"\r\n\t\t\t\t\t// i. e. \"/..\" => \"/\"\r\n\t\t\t\t\t// i. e. \"C:\\..\" => \"C:\\\"\r\n\t\t\t\t\t// i. e. \"a/../b/c\" => \"b/c\"\r\n\t\t\t\t\t// i. e. \"/../b/c\" => \"/b/c\"\r\n\t\t\t\t\t// i. e. \"C:\\..\\a\\b\\c\" => \"C:\\a\\b\\c\"\r\n\t\t\t\t\ti++;\r\n\t\t\t\t\tsep = !sep;\r\n\t\t\t\t\tresult.length = absolutePathStart;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\t// i. e. \"a/b/..\" => \"a\"\r\n\t\t\t\t\t// i. e. \"/a/..\" => \"/\"\r\n\t\t\t\t\t// i. e. \"C:\\a\\..\" => \"C:\\\"\r\n\t\t\t\t\t// i. e. \"/a/../b/c\" => \"/b/c\"\r\n\t\t\t\t\tif(absolutePathStart === 0) {\r\n\t\t\t\t\t\tresult.length -= 3;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\tsep = !sep;\r\n\t\t\t\t\t\tresult.length = 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// i. e. \"/a/b/..\" => \"/a\"\r\n\t\t\t\t\t// i. e. \"/a/b/../c\" => \"/a/c\"\r\n\t\t\t\t\tresult.length -= 3;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} else if(part === \".\") {\r\n\t\t\tswitch(result.length) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\t// i. e. \".\" => \".\"\r\n\t\t\t\t\t// i. e. \"./a/b/c\" => \"./a/b/c\"\r\n\t\t\t\t\tresult.push(part);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\t// i. e. \"a/.\" => \"a\"\r\n\t\t\t\t\t// i. e. \"/.\" => \"/\"\r\n\t\t\t\t\t// i. e. \"C:\\.\" => \"C:\\\"\r\n\t\t\t\t\t// i. e. \"C:\\.\\a\\b\\c\" => \"C:\\a\\b\\c\"\r\n\t\t\t\t\tif(absolutePathStart === 0) {\r\n\t\t\t\t\t\tresult.length--;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\tsep = !sep;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// i. e. \"a/b/.\" => \"a/b\"\r\n\t\t\t\t\t// i. e. \"/a/.\" => \"/\"\r\n\t\t\t\t\t// i. e. \"C:\\a\\.\" => \"C:\\\"\r\n\t\t\t\t\t// i. e. \"a/./b/c\" => \"a/b/c\"\r\n\t\t\t\t\t// i. e. \"/a/./b/c\" => \"/a/b/c\"\r\n\t\t\t\t\tresult.length--;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} else if(part) {\r\n\t\t\tresult.push(part);\r\n\t\t}\r\n\t}\r\n\tif(result.length === 1 && /^[A-Za-z]:$/.test(result))\r\n\t\treturn result[0] + \"\\\\\";\r\n\treturn result.join(\"\");\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-memory-fs/node_modules/memory-fs/lib/join.js":"var normalize = require(\"./normalize\");\r\n\r\nvar absoluteWinRegExp = /^[A-Z]:([\\\\\\/]|$)/i;\r\nvar absoluteNixRegExp = /^\\//i;\r\n\r\nmodule.exports = function join(path, request) {\r\n\tif(!request) return normalize(path);\r\n\tif(absoluteWinRegExp.test(request)) return normalize(request.replace(/\\//g, \"\\\\\"));\r\n\tif(absoluteNixRegExp.test(request)) return normalize(request);\r\n\tif(path == \"/\") return normalize(path + request);\r\n\tif(absoluteWinRegExp.test(path)) return normalize(path.replace(/\\//g, \"\\\\\") + \"\\\\\" + request.replace(/\\//g, \"\\\\\"));\r\n\tif(absoluteNixRegExp.test(path)) return normalize(path + \"/\" + request);\r\n\treturn normalize(path + \"/\" + request);\r\n};\r\n"}